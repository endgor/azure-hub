/**
 * Role results component
 * Displays matching roles sorted by least privilege score
 */

import { memo, useState, useMemo } from 'react';
import type { RoleMatchResult } from '@/types/rbac';

interface RoleResultsProps {
  results: RoleMatchResult[];
  selectedPermissions: string[];
  onReset: () => void;
}

const RoleResults = memo(function RoleResults({
  results,
  selectedPermissions,
  onReset,
}: RoleResultsProps) {
  const [expandedRole, setExpandedRole] = useState<string | null>(null);

  // Categorize roles as privileged admin or job function
  const isPrivilegedAdminRole = (result: RoleMatchResult): boolean => {
    const role = result.role;

    // High privilege indicator roles
    const privilegedRoleNames = ['Owner', 'Contributor', 'User Access Administrator'];
    if (privilegedRoleNames.includes(role.roleName)) {
      return true;
    }

    // Roles with wildcard permissions (*)
    for (const perm of role.permissions) {
      if (perm.actions.includes('*') || perm.dataActions.includes('*')) {
        return true;
      }
    }

    // Roles with extremely high permission counts (>500)
    if (role.permissionCount > 500) {
      return true;
    }

    return false;
  };

  // Filter and categorize results (all roles are built-in already)
  const { jobFunctionRoles, privilegedAdminRoles } = useMemo(() => {
    const jobFunc: RoleMatchResult[] = [];
    const privAdmin: RoleMatchResult[] = [];

    for (const result of results) {
      if (isPrivilegedAdminRole(result)) {
        privAdmin.push(result);
      } else {
        jobFunc.push(result);
      }
    }

    return {
      jobFunctionRoles: jobFunc,
      privilegedAdminRoles: privAdmin,
    };
  }, [results]);

  // Total count for display
  const totalFilteredCount = jobFunctionRoles.length + privilegedAdminRoles.length;

  // Export results as Azure CLI compatible JSON
  const exportAsJSON = () => {
    const allResults = [...jobFunctionRoles, ...privilegedAdminRoles];

    // Create Azure role definition format for the recommended role
    const recommendedRole = allResults[0];

    if (recommendedRole) {
      // Azure CLI role definition format
      const azureRoleDefinition = {
        Name: `Custom - ${recommendedRole.role.roleName} (Least Privilege)`,
        Id: null, // Will be auto-generated by Azure
        IsCustom: true,
        Description: `Custom role based on ${recommendedRole.role.roleName} with only the permissions you selected. Created: ${new Date().toISOString()}`,
        Actions: selectedPermissions.filter(p => !p.includes('/dataAction')),
        NotActions: [],
        DataActions: selectedPermissions.filter(p => p.includes('/dataAction')),
        NotDataActions: [],
        AssignableScopes: [
          "/subscriptions/{subscriptionId}" // User must replace with their subscription ID
        ]
      };

      // Also include reference information
      const exportData = {
        customRoleDefinition: azureRoleDefinition,
        _metadata: {
          note: "Replace {subscriptionId} with your Azure subscription ID before importing",
          importCommand: "az role definition create --role-definition @custom-role.json",
          selectedPermissions: selectedPermissions,
          recommendedBuiltInRole: {
            name: recommendedRole.role.roleName,
            id: recommendedRole.role.name,
            description: recommendedRole.role.description,
            matchPercentage: recommendedRole.matchPercentage,
            totalPermissions: recommendedRole.role.permissionCount
          },
          alternativeRoles: allResults.slice(0, 5).map(r => ({
            name: r.role.roleName,
            id: r.role.name,
            totalPermissions: r.role.permissionCount,
            category: isPrivilegedAdminRole(r) ? 'Privileged Administrator' : 'Job Function'
          }))
        }
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], {
        type: 'application/json',
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `azure-custom-role-${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      URL.revokeObjectURL(url);
    }
  };

  // Get match percentage color
  const getMatchColor = (percentage: number) => {
    if (percentage === 100) return 'text-emerald-600 dark:text-emerald-400';
    if (percentage >= 80) return 'text-sky-600 dark:text-sky-400';
    if (percentage >= 50) return 'text-amber-600 dark:text-amber-400';
    return 'text-slate-600 dark:text-slate-400';
  };

  // Get privilege level indicator with relative ranking
  const getPrivilegeLevel = (result: RoleMatchResult, resultIndex: number, totalResults: number) => {
    // If role is missing required permissions, it's incomplete
    if (result.missingPermissions.length > 0) {
      return { label: 'Incomplete Match', color: 'amber', isRecommended: false };
    }

    // For relative classification, use position in sorted results
    // Top results are already sorted by score (lower score = better)
    const percentile = (resultIndex / Math.max(totalResults - 1, 1)) * 100;

    // Add "Recommended" badge for top result(s)
    const isRecommended = resultIndex === 0;

    // Relative classification based on ranking
    if (percentile <= 15) {
      // Top 15% - best matches available
      return { label: 'Best Match', color: 'emerald', isRecommended };
    }
    if (percentile <= 40) {
      // Top 40% - good options
      return { label: 'Good Match', color: 'sky', isRecommended };
    }
    if (percentile <= 70) {
      // Top 70% - acceptable but not ideal
      return { label: 'Acceptable', color: 'orange', isRecommended };
    }
    // Bottom 30% - least desirable options
    return { label: 'High Privilege', color: 'red', isRecommended };
  };

  return (
    <div className="space-y-6">
      {/* Selected Criteria Summary */}
      <div className="rounded-xl border border-sky-200 bg-sky-50 p-4 dark:border-sky-800 dark:bg-sky-900/20">
        <h4 className="text-sm font-semibold text-sky-900 dark:text-sky-100">
          Selected Permissions
        </h4>
        <div className="mt-3 space-y-2">
          <p className="text-xs text-sky-800 dark:text-sky-200">
            <span className="font-medium">Total:</span> {selectedPermissions.length} permission{selectedPermissions.length !== 1 ? 's' : ''}
          </p>
          <div className="flex flex-wrap gap-1.5">
            {selectedPermissions.map((perm) => (
              <span
                key={perm}
                className="rounded-md bg-sky-100 px-2 py-1 font-mono text-xs text-sky-700 dark:bg-sky-900/40 dark:text-sky-200"
              >
                {perm}
              </span>
            ))}
          </div>
        </div>
      </div>

      {/* Header */}
      <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100">
            Matching Roles
          </h3>
          <p className="mt-1 text-sm text-slate-600 dark:text-slate-300">
            Found {totalFilteredCount} role{totalFilteredCount !== 1 ? 's' : ''} matching your criteria
            {jobFunctionRoles.length > 0 && privilegedAdminRoles.length > 0 && (
              <span className="ml-2 text-slate-500">
                ({jobFunctionRoles.length} job function, {privilegedAdminRoles.length} privileged admin)
              </span>
            )}
          </p>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={exportAsJSON}
            className="rounded-lg border border-slate-300 bg-white px-4 py-2 text-sm font-medium text-slate-700 transition hover:bg-slate-50 dark:border-slate-600 dark:bg-slate-900 dark:text-slate-300 dark:hover:bg-slate-800"
            title="Export as Azure custom role definition"
          >
            Export for Azure
          </button>
          <button
            onClick={onReset}
            className="rounded-lg border border-slate-300 bg-white px-4 py-2 text-sm font-medium text-slate-700 transition hover:bg-slate-50 dark:border-slate-600 dark:bg-slate-900 dark:text-slate-300 dark:hover:bg-slate-800"
          >
            Start Over
          </button>
        </div>
      </div>

      {/* Results list */}
      {totalFilteredCount > 0 ? (
        <div className="space-y-6">
          {/* Job Function Roles */}
          {jobFunctionRoles.length > 0 && (
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <h4 className="text-sm font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300">
                  Job Function Roles
                </h4>
                <span className="rounded-full bg-emerald-100 px-2 py-0.5 text-xs font-medium text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-300">
                  {jobFunctionRoles.length}
                </span>
              </div>
              {jobFunctionRoles.map((result, index) => {
                const isExpanded = expandedRole === result.role.name;
                const privilegeLevel = getPrivilegeLevel(result, index, jobFunctionRoles.length);

                return (
                  <div
                    key={result.role.name}
                    className="rounded-xl border border-slate-200 bg-white shadow-sm dark:border-slate-700 dark:bg-slate-900"
                  >
                    {/* Role header */}
                    <div className="p-4">
                      <div className="flex items-start justify-between gap-4">
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 flex-wrap">
                            <span className="text-xs font-semibold text-slate-500 dark:text-slate-400">
                              #{index + 1}
                            </span>
                            <h4 className="text-base font-semibold text-slate-900 dark:text-slate-100">
                              {result.role.roleName}
                            </h4>
                            {privilegeLevel.isRecommended && (
                              <span className="rounded-md bg-emerald-100 px-2 py-0.5 text-xs font-medium text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-300">
                                ⭐ Recommended
                              </span>
                            )}
                            {result.role.roleType === 'CustomRole' && (
                              <span className="rounded-md bg-purple-100 px-2 py-0.5 text-xs font-medium text-purple-700 dark:bg-purple-900/30 dark:text-purple-300">
                                Custom
                              </span>
                            )}
                          </div>
                          <p className="mt-1 text-sm text-slate-600 dark:text-slate-300 line-clamp-2">
                            {result.role.description}
                          </p>
                          <p className="mt-1 font-mono text-xs text-slate-500 dark:text-slate-400">
                            ID: {result.role.name}
                          </p>
                        </div>
                        <div className="flex flex-shrink-0 flex-col items-end gap-2">
                          <span
                            className={`rounded-full px-2 py-0.5 text-xs font-medium ${
                              privilegeLevel.color === 'emerald'
                                ? 'bg-emerald-100 text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-300'
                                : privilegeLevel.color === 'sky'
                                  ? 'bg-sky-100 text-sky-700 dark:bg-sky-900/30 dark:text-sky-300'
                                  : privilegeLevel.color === 'amber'
                                    ? 'bg-amber-100 text-amber-700 dark:bg-amber-900/30 dark:text-amber-300'
                                    : privilegeLevel.color === 'red'
                                      ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300'
                                      : 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300'
                            }`}
                          >
                            {privilegeLevel.label}
                          </span>
                        </div>
                      </div>

                  {/* Stats */}
                  <div className="mt-4 flex flex-wrap gap-4 text-xs text-slate-600 dark:text-slate-400">
                    <div>
                      <span className="font-semibold text-slate-900 dark:text-slate-100">
                        {result.matchedPermissions.length}
                      </span>{' '}
                      / {selectedPermissions.length} matched
                    </div>
                    {result.missingPermissions.length > 0 && (
                      <div className="text-amber-600 dark:text-amber-400">
                        <span className="font-semibold">{result.missingPermissions.length}</span>{' '}
                        missing
                      </div>
                    )}
                    <div>
                      <span className="font-semibold text-slate-900 dark:text-slate-100">
                        {result.role.permissionCount}
                      </span>{' '}
                      total permissions
                    </div>
                    <div>
                      <span className="font-semibold text-slate-900 dark:text-slate-100">
                        {result.excessCount}
                      </span>{' '}
                      excess
                    </div>
                  </div>

                  {/* Expand/collapse button */}
                  <button
                    onClick={() => setExpandedRole(isExpanded ? null : result.role.name)}
                    className="mt-3 flex items-center gap-1 text-sm font-medium text-sky-600 transition hover:text-sky-700 dark:text-sky-300 dark:hover:text-sky-200"
                  >
                    <span>{isExpanded ? 'Hide' : 'View'} Details</span>
                    <svg
                      className={`h-4 w-4 transition ${isExpanded ? 'rotate-180' : ''}`}
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                    >
                      <path d="M6 9l6 6 6-6" />
                    </svg>
                  </button>
                </div>

                {/* Expanded details */}
                {isExpanded && (
                  <div className="space-y-4 border-t border-slate-200 p-4 dark:border-slate-700">
                    {/* Matched permissions */}
                    {result.matchedPermissions.length > 0 && (
                      <div>
                        <h5 className="mb-2 text-sm font-semibold text-emerald-700 dark:text-emerald-300">
                          ✓ Matched Permissions ({result.matchedPermissions.length})
                        </h5>
                        <div className="flex flex-wrap gap-1.5">
                          {result.matchedPermissions.map((perm) => (
                            <span
                              key={perm}
                              className="rounded-md bg-emerald-50 px-2 py-1 font-mono text-xs text-emerald-700 dark:bg-emerald-900/20 dark:text-emerald-300"
                            >
                              {perm}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Missing permissions */}
                    {result.missingPermissions.length > 0 && (
                      <div>
                        <h5 className="mb-2 text-sm font-semibold text-amber-700 dark:text-amber-300">
                          ⚠ Missing Permissions ({result.missingPermissions.length})
                        </h5>
                        <div className="flex flex-wrap gap-1.5">
                          {result.missingPermissions.map((perm) => (
                            <span
                              key={perm}
                              className="rounded-md bg-amber-50 px-2 py-1 font-mono text-xs text-amber-700 dark:bg-amber-900/20 dark:text-amber-300"
                            >
                              {perm}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Excess permissions (show only first 10) */}
                    {result.excessPermissions.length > 0 && (
                      <div>
                        <h5 className="mb-2 text-sm font-semibold text-slate-700 dark:text-slate-300">
                          Additional Permissions ({result.excessPermissions.length})
                        </h5>
                        <div className="flex flex-wrap gap-1.5">
                          {result.excessPermissions.slice(0, 10).map((perm) => (
                            <span
                              key={perm}
                              className="rounded-md bg-slate-100 px-2 py-1 font-mono text-xs text-slate-600 dark:bg-slate-800 dark:text-slate-400"
                            >
                              {perm}
                            </span>
                          ))}
                          {result.excessPermissions.length > 10 && (
                            <span className="rounded-md bg-slate-100 px-2 py-1 text-xs text-slate-600 dark:bg-slate-800 dark:text-slate-400">
                              +{result.excessPermissions.length - 10} more
                            </span>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            );
          })}
            </div>
          )}

          {/* Privileged Administrator Roles */}
          {privilegedAdminRoles.length > 0 && (
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <h4 className="text-sm font-semibold uppercase tracking-wide text-orange-700 dark:text-orange-300">
                  Privileged Administrator Roles
                </h4>
                <span className="rounded-full bg-orange-100 px-2 py-0.5 text-xs font-medium text-orange-700 dark:bg-orange-900/30 dark:text-orange-300">
                  {privilegedAdminRoles.length}
                </span>
              </div>
              <p className="text-xs text-slate-600 dark:text-slate-400">
                ⚠️ These roles grant broad access and should be used with caution. Consider job function roles first.
              </p>
              {privilegedAdminRoles.map((result, index) => {
                const isExpanded = expandedRole === result.role.name;
                // For privileged admin roles, calculate relative ranking within their category
                const privilegeLevel = getPrivilegeLevel(result, jobFunctionRoles.length + index, totalFilteredCount);

                return (
                  <div
                    key={result.role.name}
                    className="rounded-xl border border-orange-200 bg-orange-50/30 shadow-sm dark:border-orange-800 dark:bg-orange-900/10"
                  >
                    {/* Role header */}
                    <div className="p-4">
                      <div className="flex items-start justify-between gap-4">
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 flex-wrap">
                            <span className="text-xs font-semibold text-slate-500 dark:text-slate-400">
                              #{jobFunctionRoles.length + index + 1}
                            </span>
                            <h4 className="text-base font-semibold text-slate-900 dark:text-slate-100">
                              {result.role.roleName}
                            </h4>
                            {privilegeLevel.isRecommended && (
                              <span className="rounded-md bg-emerald-100 px-2 py-0.5 text-xs font-medium text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-300">
                                ⭐ Recommended
                              </span>
                            )}
                            {result.role.roleType === 'CustomRole' && (
                              <span className="rounded-md bg-purple-100 px-2 py-0.5 text-xs font-medium text-purple-700 dark:bg-purple-900/30 dark:text-purple-300">
                                Custom
                              </span>
                            )}
                          </div>
                          <p className="mt-1 text-sm text-slate-600 dark:text-slate-300 line-clamp-2">
                            {result.role.description}
                          </p>
                          <p className="mt-1 font-mono text-xs text-slate-500 dark:text-slate-400">
                            ID: {result.role.name}
                          </p>
                        </div>
                        <div className="flex flex-shrink-0 flex-col items-end gap-2">
                          <span
                            className={`rounded-full px-2 py-0.5 text-xs font-medium ${
                              privilegeLevel.color === 'emerald'
                                ? 'bg-emerald-100 text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-300'
                                : privilegeLevel.color === 'sky'
                                  ? 'bg-sky-100 text-sky-700 dark:bg-sky-900/30 dark:text-sky-300'
                                  : privilegeLevel.color === 'amber'
                                    ? 'bg-amber-100 text-amber-700 dark:bg-amber-900/30 dark:text-amber-300'
                                    : privilegeLevel.color === 'red'
                                      ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300'
                                      : 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300'
                            }`}
                          >
                            {privilegeLevel.label}
                          </span>
                        </div>
                      </div>

                      {/* Stats */}
                      <div className="mt-4 flex flex-wrap gap-4 text-xs text-slate-600 dark:text-slate-400">
                        <div>
                          <span className="font-semibold text-slate-900 dark:text-slate-100">
                            {result.matchedPermissions.length}
                          </span>{' '}
                          / {selectedPermissions.length} matched
                        </div>
                        {result.missingPermissions.length > 0 && (
                          <div className="text-amber-600 dark:text-amber-400">
                            <span className="font-semibold">{result.missingPermissions.length}</span>{' '}
                            missing
                          </div>
                        )}
                        <div>
                          <span className="font-semibold text-slate-900 dark:text-slate-100">
                            {result.role.permissionCount}
                          </span>{' '}
                          total permissions
                        </div>
                        <div>
                          <span className="font-semibold text-slate-900 dark:text-slate-100">
                            {result.excessCount}
                          </span>{' '}
                          excess
                        </div>
                      </div>

                      {/* Expand/collapse button */}
                      <button
                        onClick={() => setExpandedRole(isExpanded ? null : result.role.name)}
                        className="mt-3 flex items-center gap-1 text-sm font-medium text-sky-600 transition hover:text-sky-700 dark:text-sky-300 dark:hover:text-sky-200"
                      >
                        <span>{isExpanded ? 'Hide' : 'View'} Details</span>
                        <svg
                          className={`h-4 w-4 transition ${isExpanded ? 'rotate-180' : ''}`}
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                        >
                          <path d="M6 9l6 6 6-6" />
                        </svg>
                      </button>
                    </div>

                    {/* Expanded details */}
                    {isExpanded && (
                      <div className="space-y-4 border-t border-slate-200 p-4 dark:border-slate-700">
                        {/* Matched permissions */}
                        {result.matchedPermissions.length > 0 && (
                          <div>
                            <h5 className="mb-2 text-sm font-semibold text-emerald-700 dark:text-emerald-300">
                              ✓ Matched Permissions ({result.matchedPermissions.length})
                            </h5>
                            <div className="flex flex-wrap gap-1.5">
                              {result.matchedPermissions.map((perm) => (
                                <span
                                  key={perm}
                                  className="rounded-md bg-emerald-50 px-2 py-1 font-mono text-xs text-emerald-700 dark:bg-emerald-900/20 dark:text-emerald-300"
                                >
                                  {perm}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}

                        {/* Missing permissions */}
                        {result.missingPermissions.length > 0 && (
                          <div>
                            <h5 className="mb-2 text-sm font-semibold text-amber-700 dark:text-amber-300">
                              ⚠ Missing Permissions ({result.missingPermissions.length})
                            </h5>
                            <div className="flex flex-wrap gap-1.5">
                              {result.missingPermissions.map((perm) => (
                                <span
                                  key={perm}
                                  className="rounded-md bg-amber-50 px-2 py-1 font-mono text-xs text-amber-700 dark:bg-amber-900/20 dark:text-amber-300"
                                >
                                  {perm}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}

                        {/* Excess permissions (show only first 10) */}
                        {result.excessPermissions.length > 0 && (
                          <div>
                            <h5 className="mb-2 text-sm font-semibold text-slate-700 dark:text-slate-300">
                              Additional Permissions ({result.excessPermissions.length})
                            </h5>
                            <div className="flex flex-wrap gap-1.5">
                              {result.excessPermissions.slice(0, 10).map((perm) => (
                                <span
                                  key={perm}
                                  className="rounded-md bg-slate-100 px-2 py-1 font-mono text-xs text-slate-600 dark:bg-slate-800 dark:text-slate-400"
                                >
                                  {perm}
                                </span>
                              ))}
                              {result.excessPermissions.length > 10 && (
                                <span className="rounded-md bg-slate-100 px-2 py-1 text-xs text-slate-600 dark:bg-slate-800 dark:text-slate-400">
                                  +{result.excessPermissions.length - 10} more
                                </span>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          )}
        </div>
      ) : (
        <div className="rounded-xl border border-amber-200 bg-amber-50 p-8 text-center dark:border-amber-400/40 dark:bg-amber-400/10">
          <p className="text-sm text-amber-700 dark:text-amber-200">
            No roles found matching your criteria. Try selecting different permissions.
          </p>
        </div>
      )}
    </div>
  );
});

export default RoleResults;
